/*
 * -------------------------------------------------
 *  nf-core/cutandrun Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Global default params, used in configs
params {

  // TODO nf-core: Specify your pipeline's command line flags
  // Input options
  input                      = ''

  // References
  genome                     = ''
  blacklist                  = ''
  spikein_geome              = 'K12-MG1655'
  save_reference             = false
  bowtie2_index              = ''
  spikein_fasta              = ''
  spikein_bowtie2_index      = ''

  // QC
  skip_qc                    = false
  skip_fastqc                = false
  skip_multiqc               = false

  // Sample handling
  save_merged_fastq          = false

  // Trimming
  clip_r1                    = 0
  clip_r2                    = 0
  three_prime_clip_r1        = 0
  three_prime_clip_r2        = 0
  trim_nextseq               = 0
  save_trimmed               = false
  skip_trimming              = false

  // Alignment
  aligner                    = 'bowtie2'
  save_unaligned             = false
  save_spikein_aligned       = false
  publish_align_intermed     = false
  skip_markduplicates        = false
  skip_removeduplicates      = false
  dedup_target_reads         = false
  minimum_alignment_q_score  = 0

  // Coverage
  normalisation_c            = 10000
  skip_coverage              = false

  // Reporting and Visualisation
  skip_igv                   = false
  skip_reporting             = false

  // Boilerplate options
  enable_conda               = false
  clusterOptions             = ''
  outdir                     = './results'
  publish_dir_mode           = 'copy'
  multiqc_config             = ''
  multiqc_title              = 'This is a test title'
  email                      = ''
  email_on_fail              = ''
  max_multiqc_email_size     = '25.MB'
  plaintext_email            = false
  monochrome_logs            = false
  help                       = false
  igenomes_base              = 's3://ngi-igenomes/igenomes/'
  tracedir                   = "${params.outdir}/pipeline_info"
  igenomes_ignore            = false
  singularity_pull_docker_container = true
  
  // Config options
  custom_config_version      = 'master'
  custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
  hostnames                  = [:]
  config_profile_description = ''
  config_profile_contact     = ''
  config_profile_url         = ''

  // Max resource options
  // Defaults only, expecting to be overwritten
  max_memory                 = '128.GB'
  max_cpus                   = 16
  max_time                   = '240.h'

}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Load nf-core custom profiles from different Institutions
try {
  includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
  System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

// Load igenomes.config if required
if (!params.igenomes_ignore) {
  includeConfig 'conf/igenomes.config'
} else {
  params.genomes = [:]
}

profiles {
  debug { process.beforeScript = 'echo $HOSTNAME' }
  conda { params.enable_conda = true              }
  docker {
    docker.enabled    = true
    // Avoid this error:
    //   WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
    // Testing this in nf-core after discussion here https://github.com/nf-core/tools/pull/351
    // once this is established and works well, nextflow might implement this behavior as new default.
    docker.runOptions = '-u \$(id -u):\$(id -g)'
  }
  singularity {
    singularity.enabled    = true
    singularity.autoMounts = true
  }
  podman {
    podman.enabled = true
  }
  local     { includeConfig 'conf/local.config'      }
  test      { includeConfig 'conf/test.config'      }
  test_full { includeConfig 'conf/test_full.config' }
  test_hg38_chr7 { includeConfig 'conf/test_hg38_chr7.config' }
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
  PYTHONNOUSERSITE = 1
  R_PROFILE_USER   = "/.Rprofile"
  R_ENVIRON_USER   = "/.Renviron"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file    = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file    = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file    = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file    = "${params.tracedir}/pipeline_dag.svg"
}

manifest {
  name            = 'nf-core/cutandrun'
  author          = 'Chris Cheshire and Charlotte West'
  homePage        = 'https://github.com/nf-core/cutandrun'
  description     = 'Analysis pipeline for CUT&RUN and CUT&TAG experiments that includes sequencing QC, spike-in normalisation, IgG control normalisation, peak calling and downstream peak analysis.'
  mainScript      = 'main.nf'
  nextflowVersion = '!>=20.10.0'
  version         = '1.0-dev'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
